o store all NBA teams and players in a database and enable detailed analysis before, during, and after games, we will follow these steps:

1Ô∏è‚É£ Database Structure
We create an SQLite or PostgreSQL database with the following tables:

teams (ID, name, city, conference, division)
players (ID, name, position, team, height, weight)
games (ID, home team, visitor team, date, status)
stats (ID, player, game, points, rebounds, assists, etc.)
2Ô∏è‚É£ Create & Populate the Database
Here is the code to create the tables and fill them with data from the balldontlie.io API.

python
Copiar
Editar
import sqlite3
import requests

# Connect to the SQLite database (or use PostgreSQL/MySQL)
conn = sqlite3.connect("nba_data.db")
cursor = conn.cursor()

# Create tables
cursor.execute('''
CREATE TABLE IF NOT EXISTS teams (
    id INTEGER PRIMARY KEY,
    name TEXT,
    city TEXT,
    conference TEXT,
    division TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS players (
    id INTEGER PRIMARY KEY,
    name TEXT,
    position TEXT,
    team_id INTEGER,
    height FLOAT,
    weight FLOAT,
    FOREIGN KEY (team_id) REFERENCES teams (id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS games (
    id INTEGER PRIMARY KEY,
    home_team INTEGER,
    visitor_team INTEGER,
    date TEXT,
    status TEXT,
    FOREIGN KEY (home_team) REFERENCES teams (id),
    FOREIGN KEY (visitor_team) REFERENCES teams (id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS stats (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    player_id INTEGER,
    game_id INTEGER,
    points INTEGER,
    rebounds INTEGER,
    assists INTEGER,
    FOREIGN KEY (player_id) REFERENCES players (id),
    FOREIGN KEY (game_id) REFERENCES games (id)
)
''')

conn.commit()
3Ô∏è‚É£ Insert Teams into the Database
python
Copiar
Editar
def fetch_and_store_teams():
    url = "https://www.balldontlie.io/api/v1/teams"
    response = requests.get(url).json()

    for team in response['data']:
        cursor.execute("INSERT OR IGNORE INTO teams (id, name, city, conference, division) VALUES (?, ?, ?, ?, ?)",
                       (team['id'], team['full_name'], team['city'], team['conference'], team['division']))
    
    conn.commit()
    print("‚úÖ Teams stored successfully.")

fetch_and_store_teams()
4Ô∏è‚É£ Insert Players into the Database
python
Copiar
Editar
def fetch_and_store_players():
    for page in range(1, 50):  # Pagination to get all players
        url = f"https://www.balldontlie.io/api/v1/players?page={page}"
        response = requests.get(url).json()

        for player in response['data']:
            if player['team']:  # Only if the player has a team
                cursor.execute("INSERT OR IGNORE INTO players (id, name, position, team_id, height, weight) VALUES (?, ?, ?, ?, ?, ?)",
                               (player['id'], player['first_name'] + " " + player['last_name'], player['position'], player['team']['id'], None, None))

        conn.commit()
    print("‚úÖ Players stored successfully.")

fetch_and_store_players()
5Ô∏è‚É£ Insert Games into the Database
python
Copiar
Editar
def fetch_and_store_games(start_date, end_date):
    url = f"https://www.balldontlie.io/api/v1/games?start_date={start_date}&end_date={end_date}"
    response = requests.get(url).json()

    for game in response['data']:
        cursor.execute("INSERT OR IGNORE INTO games (id, home_team, visitor_team, date, status) VALUES (?, ?, ?, ?, ?)",
                       (game['id'], game['home_team']['id'], game['visitor_team']['id'], game['date'], game['status']))

    conn.commit()
    print(f"‚úÖ Games from {start_date} to {end_date} stored.")

fetch_and_store_games("2024-02-02", "2024-02-10")
6Ô∏è‚É£ Update Player Statistics
python
Copiar
Editar
def fetch_and_store_stats():
    url = f"https://www.balldontlie.io/api/v1/stats"
    response = requests.get(url).json()

    for stat in response['data']:
        cursor.execute("INSERT INTO stats (player_id, game_id, points, rebounds, assists) VALUES (?, ?, ?, ?, ?)",
                       (stat['player']['id'], stat['game']['id'], stat['pts'], stat['reb'], stat['ast']))

    conn.commit()
    print("‚úÖ Player stats updated.")

fetch_and_store_stats()
7Ô∏è‚É£ Query the Database
Now we can run queries for advanced analysis.

Top 10 Scorers of the Season
python
Copiar
Editar
cursor.execute("SELECT players.name, SUM(stats.points) as total_points FROM stats JOIN players ON stats.player_id = players.id GROUP BY player_id ORDER BY total_points DESC LIMIT 10")
top_scorers = cursor.fetchall()

for player in top_scorers:
    print(f"{player[0]} - {player[1]} points")
Average Player Points Per Team
python
Copiar
Editar
cursor.execute("""
    SELECT teams.name, AVG(stats.points) 
    FROM stats 
    JOIN players ON stats.player_id = players.id 
    JOIN teams ON players.team_id = teams.id 
    GROUP BY teams.id
""")
team_averages = cursor.fetchall()

for team in team_averages:
    print(f"{team[0]} - {team[1]:.2f} avg points")
üöÄ Next Steps to Improve the System
‚úÖ Automate Data Updates ‚Äì Run the queries daily to maintain real-time data.
‚úÖ Include More Stats ‚Äì Add FG%, 3PT%, Blocks, Turnovers, etc.
‚úÖ Integrate with Machine Learning ‚Äì Use stored data to predict player performance.
‚úÖ Create a Web Dashboard ‚Äì A visual interface to track insights and betting opportunities.
‚úÖ Automate Betting Odds Comparison ‚Äì Compare predictions with sportsbook odds to find value bets.

